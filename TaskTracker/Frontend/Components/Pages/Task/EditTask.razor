@page "/EditTask"
@using Backend.Service
@using Backend.DTOs.ProjectDTOs
@using Backend.DTOs.TaskDTOs
@using Backend.Domain.Enums
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager

<PageTitle>Edit Task</PageTitle>

<h1>Edit Task</h1>

@if (_projects.Any())
{
    <form class="mb-3" @onsubmit="HandleSubmit">
        <div class="mb-3">
            <label for="project" class="form-label">Project</label>
            <select id="project" class="form-select" @onchange="OnProjectSelected">
                <option value="">Select a project</option>
                @foreach (var project in _projects)
                {
                    <option value="@project.Id" selected="@(_selectedProjectId == project.Id)">
                        @project.Name
                    </option>
                }
            </select>
        </div>

        @if (_tasks.Any())
        {
            <div class="mb-3">
                <label for="task" class="form-label">Task</label>
                <select id="task" class="form-select" @onchange="OnTaskSelected">
                    <option value="">Select task to edit</option>
                    @foreach (var task in _tasks)
                    {
                        <option value="@task.Title" selected="@(_selectedTaskTitle == task.Title)">
                            @task.Title
                        </option>
                    }
                </select>
            </div>
        }

        @if (_editingTask != null)
        {
            <div class="mb-3">
                <label>Description</label>
                <textarea class="form-control" @bind="_editingTask.Description"></textarea>
            </div>

            <div class="mb-3">
                <label>Duration (hours)</label>
                <input type="number" min="0.5" step="0.25" class="form-control" @bind="_durationInHours" />
                <small class="form-text text-muted">Minimum: 0.5 hours (30 minutes). Use 0.25 for 15min, 0.5 for 30min, 0.75 for 45min, etc.</small>
            </div>

            <div class="mb-3">
                <label>Status</label>
                <select class="form-select" value="@_editingTask.Status" @onchange="OnStatusChanged">
                    <option value="@Status.Pending">Pending</option>
                    <option value="@Status.Completed">Completed</option>
                    <option value="@Status.Blocked">Blocked</option>
                </select>
            </div>
            
            <button type="submit" class="btn btn-primary">Save Changes</button>
        }
    </form>
    
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <div class="alert alert-success">@_successMessage</div>
    }
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>
    }
}
else
{
    <p>Loading projects...</p>
}

@code {
    private List<GetProjectDTO> _projects = new();
    private List<GetTaskDTO> _tasks = new();
    private string _selectedTaskTitle = string.Empty;
    private int _selectedProjectId;
    private TaskDataDTO? _editingTask;
    private double _durationInHours;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;

    protected override void OnInitialized()
    {
        _projects = ProjectService.GetAllProjects()
            .Select(p => new GetProjectDTO { Id = p.Id, Name = p.Name })
            .ToList();
    }

    private void OnProjectSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            _selectedProjectId = id;
            _tasks = ProjectService.GetTasksForProjectWithId(id);
            _selectedTaskTitle = string.Empty;
            _editingTask = null;
        }
    }

    private void OnTaskSelected(ChangeEventArgs e)
    {
        _selectedTaskTitle = e.Value?.ToString() ?? "";
        var task = ProjectService.GetTaskByTitle(_selectedTaskTitle);
        

        if (task != null)
        {
            _editingTask = new TaskDataDTO
            {
                Title = task.Title,
                Description = task.Description,
                Duration = task.Duration,
                Status = task.Status,
            };

            _durationInHours = task.Duration;
        }
    }
    
    private void OnStatusChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<Status>(e.Value?.ToString(), out Status newStatus))
        {
            bool isValid = ProjectService.ValidateTaskStatus(_editingTask.Title, newStatus);
        
            if (isValid)
            {
                _editingTask.Status = newStatus;
            }
            else
            {
                _errorMessage = "Cannot change the task status, as the tasks it depends on have not been completed.";
            }
        }
    }
    
    private async Task HandleSubmit()
    {
        _errorMessage = string.Empty;
        _successMessage = string.Empty;

        try
        {
            if (_editingTask == null)
            {
                _errorMessage = "No task selected.";
                return;
            }

            bool isStatusValid = ProjectService.ValidateTaskStatus(_editingTask.Title, _editingTask.Status);
            if (!isStatusValid)
            {
                _errorMessage = "Cannot save the task because the current status is invalid based on dependencies.";
                return;
            }

            _editingTask.Duration = _durationInHours;

            var result = ProjectService.UpdateTask(_editingTask);

            if (result != null)
            {
                _successMessage = "Task updated successfully.";
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/TaskManagement");
            }
            else
            {
                _errorMessage = "Task update failed.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Unexpected error: {ex.Message}";
        }
    }}