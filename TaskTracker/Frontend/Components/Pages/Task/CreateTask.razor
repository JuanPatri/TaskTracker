@page "/CreateTask"
@using Domain
@using DTOs.TaskDTOs
@using Service
@using DTOs.ProjectDTOs
@using DTOs.ResourceDTOs
@using DTOs.TaskResourceDTOs
@using Task = System.Threading.Tasks.Task

@inject NavigationManager NavigationManager
@inject SessionService Session
@inject TaskService TaskService
@inject ResourceService ResourceService
@inject ProjectService ProjectService


<PageTitle>Create Task - TaskTrackPro</PageTitle>

<h3 class="mb-3">Create Task</h3>

@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success">@_successMessage</div>
}

<form>
    <div class="form-group mb-3">
        <label for="title">Title <span class="text-danger">*</span></label>
        <input id="title" class="form-control" @bind="_newTask.Title" required/>
    </div>

    <div class="form-group mb-3">
        <label for="description">Description <span class="text-danger">*</span></label>
        <textarea id="description" class="form-control" rows="3" @bind="_newTask.Description" required></textarea>
    </div>

    <div class="form-group mb-3">
        <label for="duration">Duration (days) <span class="text-danger">*</span></label>
        <input id="duration" type="number" min="1" step="1" class="form-control" @bind="_newTask.Duration" required/>
        <small class="form-text text-muted">Minimum: 1 day.</small>
    </div>

    <div class="form-group mb-3">
        <label for="project">Project <span class="text-danger">*</span></label>
        <select id="project" class="form-control" @bind="SelectedProjectId" required>
            <option value="">Select a project</option>
            @foreach (var project in _projectDtos)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label>Select a Task Dependency</label>
        <select class="form-control" @bind="_selectedDependencyTaskTitle">
            <option value="">-- Select a task --</option>
            @foreach (var task in _taskTitleDtos)
            {
                if (!_taskDependencies.Any(d => d == task.Title))
                {
                    <option value="@task.Title">@task.Title</option>
                }
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label>Select Dependency Type</label>
        <select class="form-control" @bind="_selectedDependencyType">
            <option value="">-- Select type --</option>
            <option value="FS">Finish to Start</option>
            <option value="SS">Start to Start</option>
        </select>
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-outline-primary" @onclick="AddDependencyToTask" disabled="@(string.IsNullOrWhiteSpace(_selectedDependencyTaskTitle) || string.IsNullOrWhiteSpace(_selectedDependencyType))">
            Add Dependency
        </button>
    </div>

    @if (_taskDependencies.Any())
    {
        <h5>Added Dependencies</h5>
        <ul class="list-group">
            @foreach (var dep in _taskDependencies)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @dep
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveDependencyFromTask(dep)">Remove</button>
                </li>
            }
        </ul>
    }

    <div class="form-group mb-3">
        <label>Select a Resource (optional)</label>
        <select class="form-control" @bind="_selectedResourceId">
            <option value="">-- Select a resource --</option>
            @foreach (var resource in _resourcesDtos)
            {
                if (!_taskResourceDataDtos.Any(r => r.ResourceId == resource.ResourceId))
                {
                    <option value="@resource.ResourceId">@resource.Name</option>
                }
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label>Quantity</label>
        <InputNumber class="form-control" @bind-Value="_selectedQuantity"/>
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-outline-primary" @onclick="AddResourceToTask" disabled="@(_selectedResourceId <= 0)">Add Resource</button>
    </div>

    @if (_taskResourceDataDtos.Any())
    {
        <h5>Added Resources</h5>
        <ul class="list-group">
            @foreach (var taskResource in _taskResourceDataDtos)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Resource ID: @taskResource.ResourceId - Quantity: @taskResource.Quantity
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveResourceFromTask(taskResource.ResourceId)">Remove</button>
                </li>
            }
        </ul>
    }

    <div class="mb-3">
        <button type="button" class="btn btn-secondary" @onclick="NavigateToCreateResource">Create Resource Exclusive to Project</button>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>
    }

    <div class="d-grid gap-2 mt-3">
        <button type="button" class="btn btn-primary btn-lg mb-3" @onclick="HandleSubmit" disabled="@(_isSubmitting)">Create Task</button>
    </div>
</form>

@code {
    private TaskDataDTO _newTask = new TaskDataDTO();
    private List<GetProjectDTO> _projectDtos = new();
    private List<GetTaskDTO> _taskTitleDtos = new();
    private List<GetResourceDto> _resourcesDtos = new();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private bool _isSubmitting = false;
    private int _selectedResourceId;
    private int _selectedQuantity = 1;
    private List<TaskResourceDataDTO> _taskResourceDataDtos = new();
    private TaskResourceDataDTO _taskResourceDataDto = new();


    private string? _selectedDependencyTaskTitle;
    private string? _selectedDependencyType;
    private List<(string Title, string Type)> _dependencyDisplayList = new();
    private List<string> _taskDependencies = new();

    private int _selectedProjectId;

    private int SelectedProjectId
    {
        get => _selectedProjectId;
        set
        {
            _selectedProjectId = value;
            OnProjectChanged(value);
        }
    }

    protected override void OnInitialized()
    {
        if (Session.IsLoggedIn())
        {
            _projectDtos = ProjectService.GetProjectsByUserEmail(Session.CurrentUser.Email);
            _resourcesDtos = ResourceService.GetResourcesForSystem();
        }
    }

    private void OnProjectChanged(int selectedProjectId)
    {
        if (selectedProjectId > 0)
        {
            _taskTitleDtos = TaskService.GetTasksForProjectWithId(selectedProjectId);

            var systemResources = ResourceService.GetResourcesForSystem();
            var exclusiveResources = ProjectService.GetExclusiveResourcesForProject(selectedProjectId);

            _resourcesDtos = systemResources.Concat(exclusiveResources)
                .GroupBy(r => r.Name)
                .Select(g => g.First())
                .ToList();

            _taskDependencies.Clear();
            _taskResourceDataDtos.Clear();
        }
        else
        {
            _taskTitleDtos.Clear();
            _resourcesDtos.Clear();
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            _isSubmitting = true;
            _errorMessage = string.Empty;

            if (_selectedProjectId <= 0)
            {
                _errorMessage = "Please select a project.";
                _isSubmitting = false;
                return;
            }

            _newTask.Dependencies = _taskDependencies;
            _newTask.Resources = _taskResourceDataDtos;

            TaskService.AddTask(_newTask);
            ProjectService.AddTaskToProject(_newTask, _selectedProjectId);

            _successMessage = "Task created successfully!";
            _errorMessage = string.Empty;

            await Task.Delay(2000);
            NavigationManager.NavigateTo("/TaskManagement");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            _successMessage = string.Empty;
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void AddDependencyToTask()
    {
        if (!string.IsNullOrWhiteSpace(_selectedDependencyTaskTitle) && !string.IsNullOrWhiteSpace(_selectedDependencyType))
        {
            var selectedTask = TaskService.GetTaskByTitle(_selectedDependencyTaskTitle);

            if (_selectedDependencyType == "FS")
            {
                if (!_taskDependencies.Contains(selectedTask.Title))
                {
                    _taskDependencies.Add(selectedTask.Title);
                    _dependencyDisplayList.Add((selectedTask.Title, "FS"));
                }
            }
            else if (_selectedDependencyType == "SS")
            {
                if (!_taskDependencies.Contains(selectedTask.Title))
                {
                    _dependencyDisplayList.Add((selectedTask.Title, "SS"));
                }

                foreach (var dep in selectedTask.Dependencies)
                {
                    if (!_taskDependencies.Contains(dep.Title))
                    {
                        _taskDependencies.Add(dep.Title);
                        _dependencyDisplayList.Add((dep.Title, "SS"));
                    }
                }
            }

            _selectedDependencyTaskTitle = null;
            _selectedDependencyType = null;
        }
    }


    private void RemoveDependencyFromTask(string taskTitle)
    {
        _taskDependencies.Remove(taskTitle);
    }

    private void AddResourceToTask()
    {
        if (_selectedResourceId > 0 && _selectedQuantity > 0)
        {
            if (_taskResourceDataDtos.Any(r => r.ResourceId == _selectedResourceId))
                return;

            bool exclusiveResourceProject = ProjectService.IsExclusiveResourceForProject(_selectedResourceId, _selectedProjectId);

            var completeTaskDto = new TaskDataDTO
            {
                Title = _newTask.Title,
                Description = _newTask.Description,
                Duration = _newTask.Duration,
                Dependencies = new List<string>(_taskDependencies),
                Resources = new List<TaskResourceDataDTO>(_taskResourceDataDtos)
            };

            var (taskEarlyStart, taskEarlyFinish) = TaskService.GetTaskDatesFromDto(completeTaskDto, _selectedProjectId);

            if (ResourceService
                .IsResourceAvailable(_selectedResourceId, _selectedProjectId, exclusiveResourceProject,
                    taskEarlyStart, taskEarlyFinish, _selectedQuantity))
            {
                TaskResourceDataDTO newTaskResourceDto = new TaskResourceDataDTO
                {
                    TaskTitle = _newTask.Title,
                    ResourceId = _selectedResourceId,
                    Quantity = _selectedQuantity
                };

                _taskResourceDataDtos.Add(newTaskResourceDto);
                _errorMessage = string.Empty;
            }
            else
            {
                string scope = exclusiveResourceProject ? "project" : "system";
                _errorMessage = $"Resource not available in {scope} from {taskEarlyStart:yyyy-MM-dd} to {taskEarlyFinish:yyyy-MM-dd}. Required: {_selectedQuantity}";
            }

            _selectedResourceId = 0;
            _selectedQuantity = 1;
        }
    }

    private void RemoveResourceFromTask(int resourceId)
    {
        TaskResourceDataDTO? taskResource = _taskResourceDataDtos.FirstOrDefault(r => r.ResourceId == resourceId);
        if (taskResource != null)
        {
            _taskResourceDataDtos.Remove(taskResource);
        }
    }

    private void NavigateToCreateResource()
    {
        NavigationManager.NavigateTo("/CreateExclusiveResource");
    }

}