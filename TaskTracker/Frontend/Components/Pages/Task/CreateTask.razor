@page "/CreateTask"
@using Backend.DTOs.TaskDTOs
@using Backend.Service
@using Backend.DTOs.ProjectDTOs
@using Backend.DTOs.ResourceDTOs
@using Backend.Domain.Enums
@inject NavigationManager NavigationManager
@inject SessionService Session
@inject ProjectService ProjectService

<PageTitle>Create Task - TaskTrackPro</PageTitle>

<h3 class="mb-3">Create Task</h3>

@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success">@_successMessage</div>
}

<form @onsubmit="HandleSubmit">
    <div class="form-group mb-3">
        <label for="title">Title <span class="text-danger">*</span></label>
        <input id="title" class="form-control" @bind="_newTask.Title" required />
    </div>

    <div class="form-group mb-3">
        <label for="description">Description <span class="text-danger">*</span></label>
        <textarea id="description" class="form-control" rows="3" @bind="_newTask.Description" required></textarea>
    </div>

    <div class="form-group mb-3">
        <label for="duration">Duration <span class="text-danger">*</span></label>
        <input id="duration" class="form-control" @bind="_durationString" placeholder="HH:mm (e.g., 01:30)" required />
    </div>

    <div class="form-group mb-3">
        <label for="status">Status</label>
        <select id="status" class="form-control" @bind="_newTask.Status">
            <option value="@Status.Pending">Pending</option>
            <option value="@Status.Completed">Completed</option>
            <option value="@Status.Blocked">Blocked</option>
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="project">Project <span class="text-danger">*</span></label>
        <select id="project" class="form-control" @bind="SelectedProjectId" required>
            <option value="">Select a project</option>
            @foreach (var project in _projectDtos)
            {
                <option value="@project.Id">@project.Name</option>
            }
        </select>
    </div>

    <div class="form-group mb-3">
        <label for="dependencies">Task Dependencies (Optional)</label>
        <select id="dependencies" multiple class="form-control" @onchange="OnDependenciesChanged">
            @foreach (var task in _taskTitleDtos)
            {
                <option value="@task.Title">@task.Title</option>
            }
        </select>
        <div class="form-text">Hold Ctrl to select multiple tasks</div>
    </div>

    <div class="form-group mb-3">
        <label for="resources">Resources (Optional)</label>
        <select id="resources" multiple class="form-control" @onchange="OnResourcesChanged">
            @foreach (var resource in _resourcesDtos)
            {
                <option value="@resource.Name">@resource.Name</option>
            }
        </select>
        <div class="form-text">Hold Ctrl to select multiple resources</div>
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-secondary" @onclick="NavigateToCreateResource">Create Resource Exclusive to Project</button>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">@_errorMessage</div>
    }
    
    <div class="d-grid gap-2 mt-3">
        <button type="submit" class="btn btn-primary btn-lg" disabled="@(_isSubmitting)">Create Task</button>
    </div>
</form>

@code {
    private TaskDataDTO _newTask = new TaskDataDTO();
    private List<GetProjectDTO> _projectDtos = new();
    private List<GetTaskDTO> _taskTitleDtos = new();
    private List<GetResourceDto> _resourcesDtos = new();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private string _durationString = string.Empty;
    private bool _isSubmitting = false;

    private List<string> SelectedDependencies { get; set; } = new();
    private List<string> SelectedResources { get; set; } = new();

    private int _selectedProjectId;
    private int SelectedProjectId
    {
        get => _selectedProjectId;
        set
        {
            _selectedProjectId = value;
            OnProjectChanged(value);
        }
    }

    protected override void OnInitialized()
    {
        if (Session.IsLoggedIn())
        {
            _projectDtos = ProjectService.GetProjectsByUserEmail(Session.CurrentUser.Email);
            _resourcesDtos = ProjectService.GetResourcesForSystem();
        }
    }

    private void OnProjectChanged(int selectedProjectId)
    {
        if (selectedProjectId > 0)
        {
            _taskTitleDtos = ProjectService.GetTasksForProjectWithId(selectedProjectId);
            SelectedDependencies.Clear();
            SelectedResources.Clear();
        }
        else
        {
            _taskTitleDtos.Clear();
        }
    }

    private void OnDependenciesChanged(ChangeEventArgs e)
    {
        if (e.Value is IEnumerable<object> selectedValues)
        {
            SelectedDependencies = selectedValues.Select(v => v.ToString()).ToList();
        }
    }

    private void OnResourcesChanged(ChangeEventArgs e)
    {
        if (e.Value is IEnumerable<object> selectedValues)
        {
            SelectedResources = selectedValues.Select(v => v.ToString()).ToList();
        }
    }

    private void NavigateToCreateResource()
    {
        NavigationManager.NavigateTo("/CreateExclusiveResource");
    }

    private async Task HandleSubmit()
    {
        try
        {
            _isSubmitting = true;
            _errorMessage = string.Empty;
            

            if (_selectedProjectId <= 0)
            {
                _errorMessage = "Please select a project.";
                _isSubmitting = false;
                return;
            }
            
            if (!TimeSpan.TryParse(_durationString, out TimeSpan parsedDuration))
            {
                _errorMessage = "Invalid duration format. Please use HH:mm (e.g., 01:30).";
                _isSubmitting = false;
                return;
            }
            
            _newTask.Duration = parsedDuration;
            _newTask.Dependencies = SelectedDependencies;
            _newTask.Resources = SelectedResources
                .Select(resourceName => (1, resourceName))
                .ToList();

            ProjectService.AddTask(_newTask);
            ProjectService.AddTaskToProject(_newTask, _selectedProjectId);

            _successMessage = "Task created successfully!";
            _errorMessage = string.Empty;
            
            await Task.Delay(2000);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            _successMessage = string.Empty;
        }
        finally
        {
            _isSubmitting = false;
        }
    }
}