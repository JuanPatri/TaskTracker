@page "/CreateProject"
@using Backend.DTOs.ProjectDTOs
@using Backend.DTOs.UserDTOs
@using Backend.Service
@inject NavigationManager NavigationManager
@inject ProjectService ProjectService
@implements IDisposable

<PageTitle>Crear Proyecto</PageTitle>
<h1>Crear Proyecto</h1>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger">@_errorMessage</div>
}

@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success">@_successMessage</div>
}

@if (_availableUsers == null)
{
    <p>Cargando usuarios...</p>
}
else
{
    <form class="mb-3" @onsubmit="HandleSubmit">
        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <input type="text" class="form-control" @bind="_projectData.Name" required />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción</label>
            <textarea class="form-control" @bind="_projectData.Description" required></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha de Inicio</label>
            <input type="date" class="form-control" @bind="_projectData.StartDate" required />
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha de Fin</label>
            <input type="date" class="form-control" @bind="_projectData.FinishDate" required />
        </div>

        <div class="mb-3">
            <label class="form-label">Miembros del Proyecto</label>
            <select class="form-select" multiple @onchange="OnMembersSelected">
                @foreach (var user in _availableUsers)
                {
                    <option value="@user.Email">@user.Name @user.LastName</option>
                }
            </select>
            <div class="form-text">Mantén presionado Ctrl para seleccionar múltiples miembros</div>
        </div>

        <div class="mb-3">
            <label class="form-label">Administrador del Proyecto</label>
            <select class="form-select" @onchange="OnAdminSelected">
                <option value="">Seleccionar administrador</option>
                @foreach (var user in _availableUsers)
                {
                    <option value="@user.Email">@user.Name @user.LastName</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Crear Proyecto</button>
    </form>
}

@code {
    private ProjectDataDTO _projectData = new();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private List<UserDataDTO>? _availableUsers;
    private string _selectedAdmin = string.Empty;
    private List<string> _selectedMembers = new();

    protected override void OnInitialized()
    {
        try
        {
            _availableUsers = ProjectService.GetAllUsers();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error al cargar usuarios: {ex.Message}";
        }
    }

    private void OnMembersSelected(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var selectedValues = (string[])e.Value;
            _selectedMembers = selectedValues.ToList();
        }
    }

    private void OnAdminSelected(ChangeEventArgs e)
    {
        _selectedAdmin = e.Value?.ToString() ?? string.Empty;
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(_selectedAdmin))
            {
                _errorMessage = "Debe seleccionar un administrador";
                return;
            }

            _projectData.Administrator = _availableUsers!.First(u => u.Email == _selectedAdmin);
            _projectData.Users = _selectedMembers;

            ProjectService.AddProject(_projectData);
            _successMessage = "Proyecto creado exitosamente!";
            _errorMessage = string.Empty;
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/ProjectManagement");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            _successMessage = string.Empty;
        }
    }

    public void Dispose()
    {
        _availableUsers = null;
    }
}
