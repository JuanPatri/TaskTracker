@page "/ProjectManagement"
@using Domain
@using DTOs.ProjectDTOs
@using Service
@inject NavigationManager NavigationManager
@inject ProjectService ProjectService
@inject UserService UserService
@inject SessionService SessionService

<PageTitle>Project Management</PageTitle>
<h1>Project Management</h1>

<button class="btn btn-primary mb-3" @onclick="GoToCreateProject">Create</button>

@if (_projects != null && _projects.Any())
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Name</th>
            <th>Start Date</th>
            <th>Administrator</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var project in _projects)
        {
            <tr>
                <td>@project.Name</td>
                <td>@project.StartDate.ToShortDateString()</td>
                <td>@($"{project.Administrator.Name} {project.Administrator.LastName}")</td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-sm btn-success me-2" @onclick="() => ViewTasks(new GetProjectDTO() { Id = project.Id, Name = project.Name })">
                            View Tasks
                        </button>
                        @if (CanEditProject(project))
                        {
                            <button class="btn btn-sm btn-danger me-2" @onclick="() => DeleteProject(new GetProjectDTO() { Id = project.Id, Name = project.Name })">
                                Delete
                            </button>
                            <button class="btn btn-warning" @onclick="() => GoToEditProject(project)">
                                Edit
                            </button>
                        }
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    <button class="btn btn-primary mb-3" @onclick="GoToDiagram">Diagram</button>
}
else
{
    <p>No project created.</p>
}

@code {
    private List<ProjectDataDTO> _projects = new();
    private User? _currentUser;

    protected override void OnInitialized()
    {
        if (SessionService.IsLoggedIn() && SessionService.CurrentUser != null)
        {
            _currentUser = SessionService.CurrentUser;
            _projects = ProjectService.ProjectsDataByUserEmail(_currentUser.Email);
        }
        else
        {
            _projects = new List<ProjectDataDTO>();
        }
    }

    private bool CanEditProject(ProjectDataDTO project)
    {
        return _currentUser.Admin || project.Administrator.Email == _currentUser.Email;
    }

    public void GoToCreateProject()
    {
        NavigationManager.NavigateTo("/CreateProject", true);
    }

    private void GoToEditProject(ProjectDataDTO project)
    {
        ProjectService.SelectedProject = project;
        NavigationManager.NavigateTo($"/EditProject", true);
    }

    private void DeleteProject(GetProjectDTO project)
    {
        ProjectService.RemoveProject(project);
        _projects = ProjectService.ProjectsDataByUserEmail(_currentUser.Email);
    }

    private void ViewTasks(GetProjectDTO getProjectDto)
    {
        NavigationManager.NavigateTo($"/ViewTaskFromProyect/{getProjectDto.Id}", true);
    }

    private void GoToDiagram()
    {
        NavigationManager.NavigateTo("/Diagram", true);
    }

}