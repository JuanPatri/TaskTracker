@page "/"
@using Domain
@using Service

@inject SessionService Session
@inject NotificationService NotificationService

@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>
<h1>Welcome to TaskTrackPro!</h1>

<p>Visualize your critical path, optimize your workflow, and deliver on time with TaskTrackPro</p>
@if (!Session.IsLoggedIn())
{
    <button class="btn btn-primary" @onclick="GoToLoginUser">Sign In</button>
}
else
{
    <button class="btn btn-primary" @onclick="GoToHome">Logout</button>
    <div class="mt-3"></div>
    <h3>Notifications</h3>
    @if (notifications != null && notifications.Any())
    {
        <div class="card notification-card">
            <div class="card-body">
                <ul class="mb-0">
                    @foreach (var notification in notifications)
                    {
                        <li class="notification-message">
                            @notification.Message
                            <button class="btn btn-link" @onclick="() => MarkAsViewed(notification.Id)">Marcar como vista</button>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <style>
.notification-card {
    max-width: 600px;
    margin: 0 auto;
    border-radius: 16px;
    box-shadow: 0 4px 16px rgba(0,0,0,0.10);
    padding: 24px;
    background: #f8f9fa;
}
.notification-message {
    font-size: 1.2rem;
    margin-bottom: 12px;
    color: #333;
}
</style>
    }
    else
    {
        <div class="card" style="max-width: 400px;">
            <div class="card-body">
                <p class="mb-0">No notifications.</p>
            </div>
        </div>
    }
}

@code {
    private List<Notification> notifications;

    protected override void OnInitialized()
    {
        if (Session.IsLoggedIn())
        {
            var user = Session.CurrentUser;
            notifications = NotificationService.GetNotificationsForUser(user.Email);
        }
    }
    
    private void MarkAsViewed(int notificationId)
    {
        var user = Session.CurrentUser;
        NotificationService.MarkNotificationAsViewed(notificationId, user.Email);
        notifications = NotificationService.GetUnviewedNotificationsForUser(user.Email);
        StateHasChanged();
    }
    
    void GoToLoginUser()
    {
        NavigationManager.NavigateTo("/LoginUser", true);
    }

    private void GoToHome()
    {
        Session.Logout();
        NavigationManager.NavigateTo("/", true);
    }

}