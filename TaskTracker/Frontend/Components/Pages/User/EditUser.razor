@page "/EditUser/{Email}"
@using DTOs.UserDTOs
@using Service
@inject UserService UserService
@inject NavigationManager NavigationManager

<h3>Edit User</h3>

@if (_userData == null)
{
    <p>User not found.</p>
}
else
{
    <EditForm Model="_userData" OnValidSubmit="SaveChanges">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="mb-2">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="_userData.Name"/>
        </div>
        <div class="mb-2">
            <label>Last Name</label>
            <InputText class="form-control" @bind-Value="_userData.LastName"/>
        </div>
        <div class="mb-2">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="_userData.Email" disabled/>
        </div>
        <div class="mb-2">
            <label>Birth Date</label>
            <InputDate class="form-control" @bind-Value="_userData.BirthDate"/>
        </div>
        <div class="mb-2">
            <label>Password</label>
            <InputText class="form-control" @bind-Value="_userData.Password" type="@passwordInputType" />
            <div>
                <InputCheckbox @bind-Value="showPassword" />
                <label>Show Password</label>
            </div>
        </div>
        <div class="mb-2">
            <label>Is Admin</label>
            <InputCheckbox class="form-check-input" @bind-Value="_userData.Admin"/>
        </div>

        <button class="btn btn-success" type="submit">Save</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-2">@_errorMessage</div>
}

@if (!string.IsNullOrEmpty(_successMessage))
{
    <div class="alert alert-success mt-2">@_successMessage</div>
}

@code {
    [Parameter] public string Email { get; set; } = string.Empty;

    private UserDataDTO? _userData;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private bool showPassword = false;

    private string passwordInputType => showPassword ? "text" : "password";

    protected override void OnInitialized()
    {
        var user = UserService.GetUser(new GetUserDTO { Email = Email });
        if (user != null)
        {
            _userData = new UserDataDTO
            {
                Name = user.Name,
                LastName = user.LastName,
                Email = user.Email,
                BirthDate = user.BirthDate,
                Password = user.Password,
                Admin = user.Admin
            };
        }
    }

    private async void SaveChanges()
    {
        try
        {
            UserService.UpdateUser(_userData!);
            _errorMessage = string.Empty;
            _successMessage = "User updated successfully!";
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/UserProfile");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _successMessage = string.Empty;
            StateHasChanged();
        }
    }

}