@page "/EditResource"
@using Backend.Domain
@using Backend.DTOs.ResourceDTOs
@using Backend.Service
@inject ResourceService ResourceService
@inject SessionService Session

<h3>Edit Resource</h3>

@if (!Session.IsLoggedIn() || Session.CurrentUser?.Admin != true)
{
    <p class="text-danger">You do not have permission to edit resources.</p>
}
else if (_resources.Count == 0)
{
    <p>No resources found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var resource in _resources)
            {
                <tr>
                    <td>@resource.Name</td>
                    <td>@resource.Description</td>
                    <td>@resource.Type.Name</td>
                    <td>
                        <button class="btn btn-sm btn-danger me-2" @onclick="() => DeleteResource(resource)">Eliminar</button>
                        <button class="btn btn-sm btn-secondary" >Editar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">@_errorMessage</div>
}

@code {
    private List<Resource> _resources = new();
    private string _errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        _resources = ResourceService.GetAllResources();
    }

    private void DeleteResource(Resource resource)
    {
        try
        {
            var dto = new GetResourceDto { Name = resource.Name };
            ResourceService.RemoveResource(dto);
            _resources.Remove(resource); 
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error deleting resource: {ex.Message}";
        }
    }
    
    // private void EditResource(Resource resource)
    // {
    //     
    // }
}
